<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\AliosThings.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\AliosThings.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Oct 09 15:34:52 2018
<BR><P>
<H3>Maximum Stack Usage =        376 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; aos_task_new_ext &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; size_to_level
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d2]">cpu_intrpt_save</a>
 <LI><a href="#[d3]">cpu_intrpt_restore</a>
 <LI><a href="#[127]">cpu_task_switch</a>
 <LI><a href="#[118]">cpu_intrpt_switch</a>
 <LI><a href="#[117]">cpu_first_task_start</a>
 <LI><a href="#[8]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">Led_Task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port_s.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from delay.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">Test1_Task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[52]">Test_Task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[15d]">dyn_mem_proc_task</a> from k_dyn_mem_proc.o(.text) referenced from k_dyn_mem_proc.o(.text)
 <LI><a href="#[4e]">fputc</a> from usart.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[4c]">idle_task</a> from k_idle.o(.text) referenced from k_sys.o(.text)
 <LI><a href="#[4d]">krhino_task_deathbed</a> from k_task.o(.text) referenced from port_c.o(.text)
 <LI><a href="#[46]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4f]">soc_err_proc</a> from soc_impl.o(.text) referenced from soc_impl.o(.data)
 <LI><a href="#[4b]">timer_task</a> from k_timer.o(.text) referenced from k_timer.o(.text)
 <LI><a href="#[4a]">work_timer_cb</a> from k_workqueue.o(.text) referenced from k_workqueue.o(.text)
 <LI><a href="#[49]">worker_task</a> from k_workqueue.o(.text) referenced from k_workqueue.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[172]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[50]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[16d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[173]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[174]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[175]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[176]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[177]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[52]"></a>Test_Task</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Test_Task &rArr; aos_msleep &rArr; krhino_task_sleep &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_version_get
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>Test1_Task</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Test1_Task &rArr; aos_msleep &rArr; krhino_task_sleep &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_version_get
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>Led_Task</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Led_Task &rArr; aos_msleep &rArr; krhino_task_sleep &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = main &rArr; aos_task_new_ext &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new_ext
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_start
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_heap_set
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[178]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>LED_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>KEY_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>KEY_Scan</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; krhino_tick_proc &rArr; tick_list_update &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_tick_proc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>delay_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>delay_us</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, delay.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[68]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, delay.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
</UL>

<P><STRONG><a name="[179]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[5a]"></a>uart_init</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[17a]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[74]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[76]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[64]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[17c]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
</UL>

<P><STRONG><a name="[17d]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[180]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[77]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[18b]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[19b]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[19c]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[7a]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[19d]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[6f]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1a3]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[70]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1a6]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1ad]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1b9]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>aos_reboot</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aos_rhino.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>aos_get_hz</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aos_rhino.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>aos_version_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aos_rhino.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test1_Task
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Task
</UL>

<P><STRONG><a name="[7c]"></a>aos_task_new</STRONG> (Thumb, 396 bytes, Stack size 48 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_create
</UL>

<P><STRONG><a name="[5f]"></a>aos_task_new_ext</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, aos_rhino.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = aos_task_new_ext &rArr; krhino_task_dyn_create &rArr; task_dyn_create &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_create
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>aos_task_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
</UL>

<P><STRONG><a name="[80]"></a>aos_task_name</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
</UL>

<P><STRONG><a name="[1bc]"></a>aos_task_key_create</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, aos_rhino.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>aos_task_key_delete</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, aos_rhino.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>aos_task_setspecific</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_info_set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
</UL>

<P><STRONG><a name="[84]"></a>aos_task_getspecific</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_info_get
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
</UL>

<P><STRONG><a name="[86]"></a>aos_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_work_destroy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_work_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_workqueue_create
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_free
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_new
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
</UL>

<P><STRONG><a name="[88]"></a>aos_malloc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_owner_attach
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_work_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_workqueue_create
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_new
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
</UL>

<P><STRONG><a name="[8b]"></a>aos_mutex_new</STRONG> (Thumb, 398 bytes, Stack size 16 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_create
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>

<P><STRONG><a name="[8d]"></a>aos_mutex_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>

<P><STRONG><a name="[8f]"></a>aos_mutex_lock</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>

<P><STRONG><a name="[92]"></a>aos_mutex_unlock</STRONG> (Thumb, 390 bytes, Stack size 16 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
</UL>

<P><STRONG><a name="[1be]"></a>aos_mutex_is_valid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aos_rhino.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>aos_sem_new</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>

<P><STRONG><a name="[96]"></a>aos_sem_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>

<P><STRONG><a name="[98]"></a>aos_sem_wait</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>

<P><STRONG><a name="[9a]"></a>aos_sem_signal</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
</UL>

<P><STRONG><a name="[1bf]"></a>aos_sem_is_valid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aos_rhino.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>aos_sem_signal_all</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give_all
</UL>

<P><STRONG><a name="[9e]"></a>aos_event_new</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_dyn_create
</UL>

<P><STRONG><a name="[a0]"></a>aos_event_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_dyn_del
</UL>

<P><STRONG><a name="[a2]"></a>aos_event_get</STRONG> (Thumb, 422 bytes, Stack size 48 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_get
</UL>

<P><STRONG><a name="[a4]"></a>aos_event_set</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_set
</UL>

<P><STRONG><a name="[a6]"></a>aos_queue_new</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_create
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>

<P><STRONG><a name="[a8]"></a>aos_queue_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_del
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>

<P><STRONG><a name="[aa]"></a>aos_queue_send</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</UL>

<P><STRONG><a name="[ac]"></a>aos_queue_recv</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</UL>

<P><STRONG><a name="[af]"></a>aos_queue_is_valid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_buf_ptr
</UL>

<P><STRONG><a name="[ae]"></a>aos_queue_buf_ptr</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_is_valid
</UL>

<P><STRONG><a name="[b0]"></a>aos_timer_new</STRONG> (Thumb, 488 bytes, Stack size 72 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_create
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>

<P><STRONG><a name="[b2]"></a>aos_timer_new_ext</STRONG> (Thumb, 470 bytes, Stack size 72 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_create
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>

<P><STRONG><a name="[b3]"></a>aos_timer_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_del
</UL>

<P><STRONG><a name="[b5]"></a>aos_timer_start</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_start
</UL>

<P><STRONG><a name="[b7]"></a>aos_timer_stop</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_stop
</UL>

<P><STRONG><a name="[b9]"></a>aos_timer_change</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_change
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>

<P><STRONG><a name="[bb]"></a>aos_workqueue_create</STRONG> (Thumb, 458 bytes, Stack size 32 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
</UL>

<P><STRONG><a name="[bd]"></a>aos_work_init</STRONG> (Thumb, 424 bytes, Stack size 48 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_init
</UL>

<P><STRONG><a name="[bf]"></a>aos_work_destroy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_stop
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_del
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</UL>

<P><STRONG><a name="[c0]"></a>aos_work_run</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_run
</UL>

<P><STRONG><a name="[c2]"></a>aos_work_sched</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_sched
</UL>

<P><STRONG><a name="[c4]"></a>aos_work_cancel</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_cancel
</UL>

<P><STRONG><a name="[c6]"></a>aos_zalloc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_owner_attach
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[c8]"></a>aos_realloc</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_owner_attach
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_realloc
</UL>

<P><STRONG><a name="[ca]"></a>aos_alloc_trace</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_owner_attach
</UL>

<P><STRONG><a name="[cb]"></a>aos_now</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
</UL>

<P><STRONG><a name="[cd]"></a>aos_now_ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aos_rhino.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
</UL>

<P><STRONG><a name="[55]"></a>aos_msleep</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, aos_rhino.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = aos_msleep &rArr; krhino_task_sleep &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Task
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test1_Task
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Task
</UL>

<P><STRONG><a name="[5e]"></a>aos_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aos_rhino.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = aos_init &rArr; krhino_init &rArr; workqueue_init &rArr; krhino_workqueue_create &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>aos_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aos_rhino.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aos_start &rArr; krhino_start
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>krhino_workqueue_create</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, k_workqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = krhino_workqueue_create &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workqueue_is_exist
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_workqueue_create
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workqueue_init
</UL>

<P><STRONG><a name="[be]"></a>krhino_work_init</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, k_workqueue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_create
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_work_init
</UL>

<P><STRONG><a name="[c1]"></a>krhino_work_run</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, k_workqueue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_arg_change_auto
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_work_run
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_sched
</UL>

<P><STRONG><a name="[c3]"></a>krhino_work_sched</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, k_workqueue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_run
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_work_sched
</UL>

<P><STRONG><a name="[c5]"></a>krhino_work_cancel</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, k_workqueue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_stop
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_work_cancel
</UL>

<P><STRONG><a name="[db]"></a>workqueue_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, k_workqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = workqueue_init &rArr; krhino_workqueue_create &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[b6]"></a>krhino_timer_start</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, k_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_start
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create
</UL>

<P><STRONG><a name="[de]"></a>krhino_timer_create</STRONG> (Thumb, 40 bytes, Stack size 80 bytes, k_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create
</UL>

<P><STRONG><a name="[df]"></a>krhino_timer_del</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, k_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</UL>

<P><STRONG><a name="[b1]"></a>krhino_timer_dyn_create</STRONG> (Thumb, 94 bytes, Stack size 80 bytes, k_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_new_ext
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_new
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_init
</UL>

<P><STRONG><a name="[b4]"></a>krhino_timer_dyn_del</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, k_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_work_destroy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_free
</UL>

<P><STRONG><a name="[b8]"></a>krhino_timer_stop</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, k_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_work_destroy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_stop
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_cancel
</UL>

<P><STRONG><a name="[ba]"></a>krhino_timer_change</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, k_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change
</UL>

<P><STRONG><a name="[e0]"></a>krhino_timer_arg_change</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, k_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</UL>

<P><STRONG><a name="[da]"></a>krhino_timer_arg_change_auto</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, k_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_run
</UL>

<P><STRONG><a name="[e7]"></a>ktimer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, k_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ktimer_init &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_fix_buf_queue_create
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[6a]"></a>krhino_tick_proc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, k_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = krhino_tick_proc &rArr; tick_list_update &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_update
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e6]"></a>krhino_sys_tick_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, k_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_sys_tick_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[cc]"></a>krhino_sys_time_get</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, k_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now
</UL>

<P><STRONG><a name="[91]"></a>krhino_ms_to_ticks</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, k_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = krhino_ms_to_ticks &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_work_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_new_ext
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_new
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_recv
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_event_get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
</UL>

<P><STRONG><a name="[ec]"></a>krhino_ticks_to_ms</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, k_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[112]"></a>tick_list_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, k_tick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[ed]"></a>tick_list_insert</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, k_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_pri_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
</UL>

<P><STRONG><a name="[ef]"></a>tick_list_rm</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, k_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tick_list_rm
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_wait_abort
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[e9]"></a>tick_list_update</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, k_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tick_list_update &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_tick_proc
</UL>

<P><STRONG><a name="[d8]"></a>krhino_task_create</STRONG> (Thumb, 54 bytes, Stack size 88 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task_start
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
</UL>

<P><STRONG><a name="[f8]"></a>task_dyn_create</STRONG> (Thumb, 154 bytes, Stack size 88 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = task_dyn_create &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_create
</UL>

<P><STRONG><a name="[7d]"></a>krhino_task_dyn_create</STRONG> (Thumb, 50 bytes, Stack size 80 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = krhino_task_dyn_create &rArr; task_dyn_create &rArr; krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_dyn_create
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new_ext
</UL>

<P><STRONG><a name="[ce]"></a>krhino_task_sleep</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = krhino_task_sleep &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
</UL>

<P><STRONG><a name="[fb]"></a>krhino_task_yield</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, k_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_head_to_tail
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>

<P><STRONG><a name="[81]"></a>krhino_cur_task_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_cur_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_getspecific
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_setspecific
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_name
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_deathbed
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_print_stack
</UL>

<P><STRONG><a name="[fd]"></a>task_suspend</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, k_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_suspend
</UL>

<P><STRONG><a name="[fe]"></a>krhino_task_suspend</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, k_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
</UL>

<P><STRONG><a name="[ff]"></a>task_resume</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, k_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_resume
</UL>

<P><STRONG><a name="[100]"></a>krhino_task_resume</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, k_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
</UL>

<P><STRONG><a name="[1c0]"></a>krhino_task_stack_min_free</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, k_task.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>krhino_task_stack_cur_free</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, k_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_get_cur_sp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>

<P><STRONG><a name="[103]"></a>task_pri_change</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_reorder
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_pri_look
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_pri_change
</UL>

<P><STRONG><a name="[107]"></a>krhino_task_pri_change</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, k_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_pri_limit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>

<P><STRONG><a name="[109]"></a>krhino_task_wait_abort</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, k_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>

<P><STRONG><a name="[10d]"></a>krhino_task_del</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = krhino_task_del &rArr; mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_free
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_deathbed
</UL>

<P><STRONG><a name="[7f]"></a>krhino_task_dyn_del</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_free
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_deathbed
</UL>

<P><STRONG><a name="[10e]"></a>krhino_task_time_slice_set</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, k_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>

<P><STRONG><a name="[10f]"></a>krhino_sched_policy_set</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, k_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>

<P><STRONG><a name="[110]"></a>krhino_sched_policy_get</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, k_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>

<P><STRONG><a name="[83]"></a>krhino_task_info_set</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, k_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_setspecific
</UL>

<P><STRONG><a name="[85]"></a>krhino_task_info_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, k_task.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_getspecific
</UL>

<P><STRONG><a name="[4d]"></a>krhino_task_deathbed</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = krhino_task_deathbed &rArr; krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port_c.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>krhino_init</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, k_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = krhino_init &rArr; workqueue_init &rArr; krhino_workqueue_create &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runqueue_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kobj_list_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task_start
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workqueue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_init
</UL>

<P><STRONG><a name="[d0]"></a>krhino_start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, k_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = krhino_start
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preferred_cpu_ready_task_get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_first_task_start
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_start
</UL>

<P><STRONG><a name="[69]"></a>krhino_intrpt_enter</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, k_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = krhino_intrpt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6b]"></a>krhino_intrpt_exit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, k_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_intrpt_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preferred_cpu_ready_task_get
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_switch
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[119]"></a>krhino_next_sleep_ticks_get</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, k_sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>

<P><STRONG><a name="[1c1]"></a>krhino_global_space_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, k_sys.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>krhino_version_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, k_sys.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>kobj_list_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, k_stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = kobj_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[11b]"></a>krhino_stack_ovf_check</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, k_stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = krhino_stack_ovf_check &rArr; k_err_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[95]"></a>krhino_sem_create</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, k_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = krhino_sem_create &rArr; sem_create
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
</UL>

<P><STRONG><a name="[97]"></a>krhino_sem_del</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, k_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = krhino_sem_del &rArr; pend_task_rm &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
</UL>

<P><STRONG><a name="[120]"></a>krhino_sem_dyn_create</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, k_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
</UL>

<P><STRONG><a name="[121]"></a>krhino_sem_dyn_del</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, k_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>

<P><STRONG><a name="[9b]"></a>krhino_sem_give</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, k_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_timer_cb
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_run
</UL>

<P><STRONG><a name="[9d]"></a>krhino_sem_give_all</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, k_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal_all
</UL>

<P><STRONG><a name="[99]"></a>krhino_sem_take</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, k_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = krhino_sem_take &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_task
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
</UL>

<P><STRONG><a name="[124]"></a>krhino_sem_count_set</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, k_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>

<P><STRONG><a name="[125]"></a>krhino_sem_count_get</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, k_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>

<P><STRONG><a name="[126]"></a>krhino_sched_disable</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, k_sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>

<P><STRONG><a name="[116]"></a>preferred_cpu_ready_task_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, k_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>

<P><STRONG><a name="[f7]"></a>core_sched</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, k_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = core_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_switch
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preferred_cpu_ready_task_get
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_get
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_dyn_del
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_del
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_del
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_dyn_del
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_dyn_del
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_wait_abort
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_pri_change
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_yield
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_dyn_del
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
</UL>

<P><STRONG><a name="[128]"></a>krhino_sched_enable</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, k_sched.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>

<P><STRONG><a name="[111]"></a>runqueue_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, k_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[104]"></a>ready_list_add_head</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, k_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ready_list_add_head &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ready_list_empty
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
</UL>

<P><STRONG><a name="[f6]"></a>ready_list_add_tail</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, k_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ready_list_empty
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
</UL>

<P><STRONG><a name="[f1]"></a>ready_list_add</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, k_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_wait_abort
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[f9]"></a>ready_list_rm</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, k_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ready_list_rm &rArr; k_err_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_find_first_bit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
</UL>

<P><STRONG><a name="[fc]"></a>ready_list_head_to_tail</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, k_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_yield
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_update
</UL>

<P><STRONG><a name="[ea]"></a>time_slice_update</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, k_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = time_slice_update
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ready_list_empty
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_head_to_tail
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_tick_proc
</UL>

<P><STRONG><a name="[12e]"></a>ringbuf_reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, k_ringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_del
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_flush
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_dyn_del
</UL>

<P><STRONG><a name="[12d]"></a>ringbuf_init</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, k_ringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
</UL>

<P><STRONG><a name="[130]"></a>ringbuf_is_full</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, k_ringbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_push
</UL>

<P><STRONG><a name="[12f]"></a>ringbuf_push</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, k_ringbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_is_full
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
</UL>

<P><STRONG><a name="[133]"></a>ringbuf_is_empty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, k_ringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
</UL>

<P><STRONG><a name="[132]"></a>ringbuf_pop</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, k_ringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ringbuf_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_is_empty
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</UL>

<P><STRONG><a name="[10c]"></a>pend_task_wakeup</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, k_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_free
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
</UL>

<P><STRONG><a name="[123]"></a>pend_to_blk_obj</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, k_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_get
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</UL>

<P><STRONG><a name="[11d]"></a>pend_task_rm</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, k_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pend_task_rm &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_dyn_del
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_del
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_del
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_dyn_del
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_dyn_del
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_dyn_del
</UL>

<P><STRONG><a name="[105]"></a>pend_list_reorder</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, k_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pend_list_reorder &rArr; pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
</UL>

<P><STRONG><a name="[fa]"></a>pend_state_end_proc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, k_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pend_state_end_proc &rArr; k_err_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_get
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</UL>

<P><STRONG><a name="[137]"></a>mutex_create</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, k_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_create
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_dyn_create
</UL>

<P><STRONG><a name="[8c]"></a>krhino_mutex_create</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, k_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
</UL>

<P><STRONG><a name="[106]"></a>mutex_pri_look</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, k_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mutex_pri_look
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
</UL>

<P><STRONG><a name="[8e]"></a>krhino_mutex_del</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, k_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
</UL>

<P><STRONG><a name="[13b]"></a>krhino_mutex_dyn_create</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, k_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
</UL>

<P><STRONG><a name="[13c]"></a>krhino_mutex_dyn_del</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, k_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>

<P><STRONG><a name="[108]"></a>mutex_pri_limit</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, k_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_pri_change
</UL>

<P><STRONG><a name="[f2]"></a>mutex_task_pri_reset</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, k_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mutex_task_pri_reset &rArr; mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_wait_abort
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[90]"></a>krhino_mutex_lock</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, k_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
</UL>

<P><STRONG><a name="[93]"></a>krhino_mutex_unlock</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, k_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
</UL>

<P><STRONG><a name="[13d]"></a>print_block</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, k_mm_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = print_block &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_map
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_free_map
</UL>

<P><STRONG><a name="[13e]"></a>dump_kmm_free_map</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, k_mm_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dump_kmm_free_map &rArr; print_block &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_block
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_mm_info_func
</UL>

<P><STRONG><a name="[13f]"></a>dump_kmm_map</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, k_mm_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dump_kmm_map &rArr; print_block &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_block
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_mm_info_func
</UL>

<P><STRONG><a name="[140]"></a>dump_kmm_statistic_info</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, k_mm_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dump_kmm_statistic_info &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_mm_info_func
</UL>

<P><STRONG><a name="[141]"></a>dumpsys_mm_info_func</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, k_mm_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = dumpsys_mm_info_func &rArr; dump_kmm_map &rArr; print_block &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_statistic_info
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_map
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_free_map
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_realloc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
</UL>

<P><STRONG><a name="[142]"></a>krhino_mblk_pool_init</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, k_mm_blk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = krhino_mblk_pool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
</UL>

<P><STRONG><a name="[143]"></a>krhino_mblk_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, k_mm_blk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = krhino_mblk_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_alloc
</UL>

<P><STRONG><a name="[144]"></a>krhino_mblk_free</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, k_mm_blk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
</UL>

<P><STRONG><a name="[14b]"></a>k_mm_free</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, k_mm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removesize
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_delete
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_insert
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
</UL>

<P><STRONG><a name="[14c]"></a>krhino_add_mm_region</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, k_mm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = krhino_add_mm_region &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mm_region
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_init
</UL>

<P><STRONG><a name="[152]"></a>k_mm_alloc</STRONG> (Thumb, 462 bytes, Stack size 48 bytes, k_mm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_alloc
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_up_level
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addsize
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_delete
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_insert
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_to_level
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
</UL>

<P><STRONG><a name="[153]"></a>krhino_init_mm_head</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, k_mm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = krhino_init_mm_head &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mm_region
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removesize
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_pool_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_init
</UL>

<P><STRONG><a name="[114]"></a>k_mm_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, k_mm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = k_mm_init &rArr; krhino_init_mm_head &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[154]"></a>show_mm</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, k_mm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[155]"></a>krhino_deinit_mm_head</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, k_mm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[156]"></a>k_mm_realloc</STRONG> (Thumb, 688 bytes, Stack size 56 bytes, k_mm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addsize
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removesize
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_delete
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_insert
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_realloc
</UL>

<P><STRONG><a name="[8a]"></a>krhino_owner_attach</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, k_mm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = krhino_owner_attach
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_realloc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_alloc_trace
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_realloc
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_zalloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
</UL>

<P><STRONG><a name="[89]"></a>krhino_mm_alloc</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, k_mm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = krhino_mm_alloc &rArr; k_mm_alloc &rArr; k_mm_smallblk_alloc &rArr; addsize &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_owner_attach
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_mm_info_func
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_create
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_dyn_create
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_zalloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_dyn_create
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_dyn_create
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_dyn_create
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_dyn_create
</UL>

<P><STRONG><a name="[87]"></a>krhino_mm_free</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, k_mm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = krhino_mm_free &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_create
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_dyn_del
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_dyn_create
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_dyn_del
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_dyn_create
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_dyn_del
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_dyn_create
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_dyn_create
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_dyn_del
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_dyn_create
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
</UL>

<P><STRONG><a name="[c9]"></a>krhino_mm_realloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, k_mm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_owner_attach
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_mm_info_func
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_realloc
</UL>

<P><STRONG><a name="[4c]"></a>idle_task</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, k_idle.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_sys.o(.text)
</UL>
<P><STRONG><a name="[158]"></a>krhino_event_create</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, k_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_create
</UL>

<P><STRONG><a name="[159]"></a>krhino_event_del</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, k_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>

<P><STRONG><a name="[9f]"></a>krhino_event_dyn_create</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, k_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_event_new
</UL>

<P><STRONG><a name="[a1]"></a>krhino_event_dyn_del</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, k_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_event_free
</UL>

<P><STRONG><a name="[a3]"></a>krhino_event_get</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, k_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_event_get
</UL>

<P><STRONG><a name="[a5]"></a>krhino_event_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, k_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_event_set
</UL>

<P><STRONG><a name="[d4]"></a>k_err_proc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, k_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_realloc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_stack_ovf_check
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_stack_cur_free
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_task
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
</UL>

<P><STRONG><a name="[15d]"></a>dyn_mem_proc_task</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, k_dyn_mem_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = dyn_mem_proc_task &rArr; krhino_sem_take &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_dyn_mem_proc.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>dyn_mem_proc_task_start</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, k_dyn_mem_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = dyn_mem_proc_task_start &rArr; krhino_task_create &rArr; task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</UL>

<P><STRONG><a name="[a7]"></a>krhino_buf_queue_create</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, k_buf_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_new
</UL>

<P><STRONG><a name="[e8]"></a>krhino_fix_buf_queue_create</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, k_buf_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = krhino_fix_buf_queue_create &rArr; buf_queue_create &rArr; ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
</UL>

<P><STRONG><a name="[a9]"></a>krhino_buf_queue_del</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, k_buf_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_reset
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_free
</UL>

<P><STRONG><a name="[162]"></a>krhino_buf_queue_dyn_create</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, k_buf_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
</UL>

<P><STRONG><a name="[163]"></a>krhino_buf_queue_dyn_del</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, k_buf_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_reset
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
</UL>

<P><STRONG><a name="[ab]"></a>krhino_buf_queue_send</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, k_buf_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_stop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_start
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_del
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_change
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_send
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_arg_change
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_del
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_arg_change_auto
</UL>

<P><STRONG><a name="[ad]"></a>krhino_buf_queue_recv</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, k_buf_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = krhino_buf_queue_recv &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_is_empty
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_queue_recv
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[165]"></a>krhino_buf_queue_flush</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, k_buf_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_reset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>

<P><STRONG><a name="[166]"></a>krhino_buf_queue_info_get</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, k_buf_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>

<P><STRONG><a name="[f4]"></a>cpu_task_stack_init</STRONG> (Thumb, 176 bytes, Stack size 20 bytes, port_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_task_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>

<P><STRONG><a name="[d2]"></a>cpu_intrpt_save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_info_set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_owner_attach
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_get
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_dyn_del
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_del
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_del
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_create
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_pool_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_mm_info_func
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_dyn_del
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_enable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_disable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_dyn_del
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_next_sleep_ticks_get
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_policy_get
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_policy_set
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_time_slice_set
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_wait_abort
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_pri_change
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_stack_cur_free
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_yield
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_count_set
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_count_get
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_update
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_timer_cb
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_task
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workqueue_is_exist
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_run
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_cancel
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_info_get
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_flush
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_dyn_del
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
</UL>

<P><STRONG><a name="[d3]"></a>cpu_intrpt_restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_info_set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_owner_attach
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_get
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_dyn_del
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_del
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_del
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_create
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_pool_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_mm_info_func
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_dyn_del
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_enable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_disable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_dyn_del
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_create
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_next_sleep_ticks_get
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_policy_get
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_policy_set
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_time_slice_set
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_wait_abort
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_pri_change
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_stack_cur_free
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_yield
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_count_set
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_count_get
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_update
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_timer_cb
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_task
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workqueue_is_exist
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_run
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_cancel
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_info_get
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_flush
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_dyn_del
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
</UL>

<P><STRONG><a name="[127]"></a>cpu_task_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</UL>

<P><STRONG><a name="[118]"></a>cpu_intrpt_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
</UL>

<P><STRONG><a name="[117]"></a>cpu_first_task_start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; krhino_stack_ovf_check &rArr; k_err_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_stack_ovf_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[168]"></a>__aeabi_assert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, soc_impl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_err_proc
</UL>

<P><STRONG><a name="[5d]"></a>aos_heap_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, soc_impl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>soc_get_cur_sp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, soc_impl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_stack_cur_free
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_print_stack
</UL>

<P><STRONG><a name="[4f]"></a>soc_err_proc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, soc_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = soc_err_proc &rArr; soc_print_stack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_print_stack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soc_impl.o(.data)
</UL>
<P><STRONG><a name="[eb]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ticks_to_ms
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_push
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task
</UL>

<P><STRONG><a name="[1c3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1c4]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_zalloc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_deinit_mm_head
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_init
</UL>

<P><STRONG><a name="[1c6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1c7]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1c8]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1c9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ca]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[54]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_realloc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test1_Task
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Task
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mm
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpsys_mm_info_func
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_statistic_info
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_map
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_kmm_free_map
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_block
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_print_stack
</UL>

<P><STRONG><a name="[1cb]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1cc]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1cd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[62]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[61]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d7]"></a>klist_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_workqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_timer_cb
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_run
</UL>

<P><STRONG><a name="[d5]"></a>klist_rm_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, k_workqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;work_timer_cb
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;worker_task
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_run
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_cancel
</UL>

<P><STRONG><a name="[d1]"></a>workqueue_is_exist</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, k_workqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = workqueue_is_exist
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
</UL>

<P><STRONG><a name="[49]"></a>worker_task</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, k_workqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = worker_task &rArr; krhino_sem_take &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_workqueue.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>work_timer_cb</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, k_workqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = work_timer_cb &rArr; krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_workqueue.o(.text)
</UL>
<P><STRONG><a name="[d6]"></a>klist_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, k_workqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;workqueue_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_workqueue_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_work_init
</UL>

<P><STRONG><a name="[e3]"></a>timer_list_pri_insert</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, k_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_list_pri_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_proc
</UL>

<P><STRONG><a name="[e2]"></a>timer_list_rm</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, k_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_proc
</UL>

<P><STRONG><a name="[dc]"></a>timer_create</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, k_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_start
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_create
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_create
</UL>

<P><STRONG><a name="[e1]"></a>timer_cb_proc</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, k_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_cb_proc &rArr; timer_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_rm
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_pri_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[e4]"></a>cmd_proc</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, k_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = cmd_proc &rArr; krhino_mm_free &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_rm
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_pri_insert
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cmd_proc
</UL>

<P><STRONG><a name="[e5]"></a>timer_cmd_proc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, k_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = timer_cmd_proc &rArr; cmd_proc &rArr; krhino_mm_free &rArr; k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[4b]"></a>timer_task</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, k_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = timer_task &rArr; krhino_buf_queue_recv &rArr; pend_to_blk_obj &rArr; tick_list_insert &rArr; tick_list_pri_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cmd_proc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_proc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> k_timer.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>klist_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, k_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_create
</UL>

<P><STRONG><a name="[f0]"></a>klist_rm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_tick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[ee]"></a>tick_list_pri_insert</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, k_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tick_list_pri_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
</UL>

<P><STRONG><a name="[f5]"></a>klist_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create
</UL>

<P><STRONG><a name="[f3]"></a>task_create</STRONG> (Thumb, 420 bytes, Stack size 64 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = task_create &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stack_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_dyn_create
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
</UL>

<P><STRONG><a name="[10b]"></a>task_mutex_free</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, k_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = task_mutex_free &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
</UL>

<P><STRONG><a name="[10a]"></a>klist_rm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_wait_abort
</UL>

<P><STRONG><a name="[11a]"></a>klist_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, k_stats.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kobj_list_init
</UL>

<P><STRONG><a name="[11c]"></a>sem_create</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, k_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = sem_create
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_dyn_create
</UL>

<P><STRONG><a name="[122]"></a>sem_give</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, k_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sem_give &rArr; pend_task_wakeup &rArr; ready_list_add &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give_all
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
</UL>

<P><STRONG><a name="[11e]"></a>is_klist_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, k_sem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_dyn_del
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_count_set
</UL>

<P><STRONG><a name="[11f]"></a>klist_rm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_sem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_dyn_del
</UL>

<P><STRONG><a name="[12b]"></a>klist_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>

<P><STRONG><a name="[12a]"></a>ready_list_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, k_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ready_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</UL>

<P><STRONG><a name="[12c]"></a>krhino_find_first_bit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, k_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
</UL>

<P><STRONG><a name="[129]"></a>is_ready_list_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, k_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_update
</UL>

<P><STRONG><a name="[135]"></a>klist_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_pend.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
</UL>

<P><STRONG><a name="[134]"></a>pend_list_add</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, k_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_reorder
</UL>

<P><STRONG><a name="[136]"></a>klist_rm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_pend.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_reorder
</UL>

<P><STRONG><a name="[139]"></a>mutex_release</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, k_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mutex_release &rArr; task_pri_change &rArr; ready_list_add_tail &rArr; ready_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_pri_look
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_dyn_del
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
</UL>

<P><STRONG><a name="[138]"></a>is_klist_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, k_mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_dyn_del
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_pri_look
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_pri_limit
</UL>

<P><STRONG><a name="[13a]"></a>klist_rm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_mutex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_dyn_del
</UL>

<P><STRONG><a name="[145]"></a>size_to_level</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, k_mm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_clz32
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addsize
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_delete
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_insert
</UL>

<P><STRONG><a name="[147]"></a>k_mm_freelist_insert</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, k_mm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = k_mm_freelist_insert &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_to_level
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
</UL>

<P><STRONG><a name="[148]"></a>k_mm_freelist_delete</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, k_mm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = k_mm_freelist_delete &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_to_level
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
</UL>

<P><STRONG><a name="[14a]"></a>removesize</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, k_mm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
</UL>

<P><STRONG><a name="[149]"></a>k_mm_smallblk_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, k_mm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = k_mm_smallblk_free &rArr; krhino_mblk_free
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removesize
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
</UL>

<P><STRONG><a name="[14d]"></a>init_mm_region</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, k_mm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_mm_region
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
</UL>

<P><STRONG><a name="[14e]"></a>addsize</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, k_mm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = addsize &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_to_level
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_realloc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_alloc
</UL>

<P><STRONG><a name="[14f]"></a>find_up_level</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, k_mm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = find_up_level
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ctz32
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</UL>

<P><STRONG><a name="[151]"></a>k_mm_smallblk_alloc</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, k_mm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = k_mm_smallblk_alloc &rArr; addsize &rArr; size_to_level
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addsize
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</UL>

<P><STRONG><a name="[146]"></a>krhino_clz32</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, k_mm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_to_level
</UL>

<P><STRONG><a name="[150]"></a>krhino_ctz32</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, k_mm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_up_level
</UL>

<P><STRONG><a name="[157]"></a>event_create</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, k_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_dyn_create
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_create
</UL>

<P><STRONG><a name="[15c]"></a>event_set</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, k_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_set
</UL>

<P><STRONG><a name="[15a]"></a>is_klist_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, k_event.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_dyn_del
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_del
</UL>

<P><STRONG><a name="[15b]"></a>klist_rm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_event.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_dyn_del
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_event_del
</UL>

<P><STRONG><a name="[15f]"></a>buf_queue_create</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, k_buf_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = buf_queue_create &rArr; ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_create
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_fix_buf_queue_create
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_dyn_create
</UL>

<P><STRONG><a name="[164]"></a>buf_queue_send</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, k_buf_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_push
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_klist_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</UL>

<P><STRONG><a name="[160]"></a>is_klist_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, k_buf_queue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_del
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_dyn_del
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_send
</UL>

<P><STRONG><a name="[161]"></a>klist_rm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, k_buf_queue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_del
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_dyn_del
</UL>

<P><STRONG><a name="[167]"></a>soc_print_stack</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, soc_impl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = soc_print_stack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_get_cur_sp
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_err_proc
</UL>

<P><STRONG><a name="[16f]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[171]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[170]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
